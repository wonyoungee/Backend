**************** 4/13 *********************

<c#을 활용한 데이터 처리>

1. ADO.NET
연결지향
웹서버와 데이터셋을 연결하여 왔다갔다 하면서 데이터 가져옴

1-1. c# DataSet
비연결기반 - 실시간으로 데이터 받아오지 않음
데이터의셋의 데이터들을 웹서버의 메모리에 옮겨옴 (복제) - 그리고 연결 끊어버림.. 데이터 다루는 작업은 웹서버 메모리에 있는 것으로.. -> 비연결데이터 문제 심각 - 실제 데이터베이스와 동기화가 안됨 -> 중앙 db와 동기화 작업 필요 -> 비연결기반 거의 쓰지 않고 있음

[웹]
연결기반
웹서버와 디비 - 연결기반
클라이언트와 디비 - 비연결기반 (요청시 연결, 요청 끝나면 끊김)


1-2. Connection Pooling
*연결 : 문자열 생성- open - db서버 - 문자열 정보 분석 => 연결할때마다 이러한 과정 반복
*Pooling : 문자열 매번 생성 X, Pool에 미리 자원 만들어놓고 빌려서 씀.. -> 성능 좋음. 

2. ORM - entity framework
* 기존 : 웹 - 디비 연결 - 데이터 select - 객체 안에 담음
* ORM : 번역기 같은 것. 데이터를 객체로 바꾸는 일련의 작업을 이 프레임워크가 대신 해줌...
코드량 적음. ex) MyBatis, JPA

3. LINQ to SQL
c# 코드에서 직접적으로 데이터 가져옴..

4. JSON data 다루기


--------------------------------------------------------------------------

<jQuery AJAX>

Ex06 전까진 교수님껄로^6...


<?xml version="1.0" encoding="UTF-8"?>
<Companys>
	<Company CompanyType="private">
		<CompanyName>Bit</CompanyName>
		<CompanyNumber>2019</CompanyNumber>
		<CompanyAddress>서울시 서초구</CompanyAddress>
		<Name></Name>
	</Company>
	<Company CompanyType="crop">
		<CompanyName>kakaT</CompanyName>
		<CompanyNumber>2020</CompanyNumber>
		<CompanyAddress>제주 서귀포시</CompanyAddress>
		<Name></Name>
	</Company>
</Companys>



------------------------------------------------------------------------

*********  4/14 ****************
웹서버 - 디비
1. 연결
2. 쿼리 날림 (서버->디비)
3. 디비에서 row단위로 데이터 가져옴 (디비->서버)
즉, 서버-디비간의 연결 끊기면 데이터 못 가져옴.



<ASP.NET MVC 패턴>
model, view, controller

- RouteConfig.cs : 형식, 디폴트 정의
	- url: "{controller}/{action}/{id}"

- 마스터 페이지를 만들고 추가하는 개념

- 컨트롤러 생성시 뷰도 같이 생성됨